package bot

import (
	"ai_support_tg_writer_bot/internal/config"
	"ai_support_tg_writer_bot/internal/models"
	"ai_support_tg_writer_bot/internal/service"
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api           *tgbotapi.BotAPI
	config        *config.Config
	userService   service.UserService
	ticketService service.TicketService
	fileService   service.FileService
	stateManager  *StateManager
}

func NewBot(cfg *config.Config, userService service.UserService, ticketService service.TicketService, fileService service.FileService) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramBotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	bot.Debug = false

	log.Printf("Authorized on account %s", bot.Self.UserName)

	return &Bot{
		api:           bot,
		config:        cfg,
		userService:   userService,
		ticketService: ticketService,
		fileService:   fileService,
		stateManager:  NewStateManager(),
	}, nil
}

func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.userService.CreateOrGetUser(
		int64(message.From.ID),
		message.From.UserName,
		message.From.FirstName,
		message.From.LastName,
	)
	if err != nil {
		log.Printf("Failed to create/get user: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
	isAdmin := b.isUserAdmin(int64(message.From.ID))

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–æ –Ω–µ –≤ –±–∞–∑–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
	if isAdmin && !user.IsAdmin {
		b.userService.SetAdmin(int64(message.From.ID), true)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		b.handleCommand(message, user, isAdmin)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.handleRegularMessage(message, user, isAdmin)
}

func (b *Bot) handleCommand(message *tgbotapi.Message, user *models.User, isAdmin bool) {
	switch message.Command() {
	case "start":
		b.handleStartCommand(message, user)
	case "help":
		b.handleHelpCommand(message, user)
	case "admin":
		if isAdmin {
			b.handleAdminCommand(message, user)
		} else {
			b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		}
	case "cancel":
		if isAdmin {
			b.handleCancelCommand(message, user)
		} else {
			b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		}
	case "tickets":
		if isAdmin {
			b.handleTicketsCommand(message, user)
		} else {
			b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		}
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message, user *models.User) {
	welcomeText := `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Social Flow!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã –æ –±–∞–≥–∞—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", "create_ticket"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", "my_tickets"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleHelpCommand(message *tgbotapi.Message, user *models.User) {
	helpText := `üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
	if b.isUserAdmin(int64(message.From.ID)) {
		helpText += `

üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/admin - –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç`
	}

	helpText += `

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`

	b.sendMessage(message.Chat.ID, helpText)
}

func (b *Bot) handleAdminCommand(message *tgbotapi.Message, user *models.User) {
	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É
	b.stateManager.ClearUserState(int64(message.From.ID))

	adminText := `üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã", "admin_open_tickets"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã", "admin_answered_tickets"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã", "admin_closed_tickets"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, adminText)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleCancelCommand(message *tgbotapi.Message, user *models.User) {
	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	b.stateManager.ClearUserState(int64(message.From.ID))
	b.sendMessage(message.Chat.ID, "‚úÖ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
}

func (b *Bot) handleTicketsCommand(message *tgbotapi.Message, user *models.User) {
	// –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤
	openTickets, err := b.ticketService.GetOpenTickets()
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	if len(openTickets) == 0 {
		b.sendMessage(message.Chat.ID, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	text := "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
	for _, ticket := range openTickets {
		text += fmt.Sprintf("üî∏ –¢–∏–∫–µ—Ç #%d\n", ticket.ID)
		text += fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", ticket.User.FirstName)
		text += fmt.Sprintf("üìù –¢–µ–º–∞: %s\n", ticket.Subject)
		text += fmt.Sprintf("üìÖ –°–æ–∑–¥–∞–Ω: %s\n\n", ticket.CreatedAt.Format("02.01.2006 15:04"))
	}

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleRegularMessage(message *tgbotapi.Message, user *models.User, isAdmin bool) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
	if isAdmin {
		isReplying, ticketID := b.stateManager.IsReplyingToTicket(int64(message.From.ID))
		if isReplying {
			// –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç
			admin, err := b.userService.GetUserByTelegramID(int64(message.From.ID))
			if err != nil {
				log.Printf("Failed to get admin user: %v", err)
				b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
				return
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
			_, err = b.ticketService.AddMessage(ticketID, admin.ID, message.Text, false)
			if err != nil {
				log.Printf("Failed to add admin message: %v", err)
				b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")
				return
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
			if err := b.handleMessageFiles(message, ticketID, admin.ID); err != nil {
				log.Printf("Failed to handle files: %v", err)
			}

			b.sendMessage(message.Chat.ID, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç #"+strconv.Itoa(int(ticketID)))

			// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
			b.stateManager.ClearUserState(int64(message.From.ID))
			return
		}
	}

	// –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
	activeTicket, err := b.ticketService.GetActiveTicketByUserID(user.ID)
	if err != nil {
		log.Printf("Failed to get active ticket: %v", err)
		b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if activeTicket == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
		subject := "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç"
		if len(message.Text) > 50 {
			subject = message.Text[:50] + "..."
		} else if message.Text != "" {
			subject = message.Text
		}

		ticket, err := b.ticketService.CreateTicket(user.ID, subject)
		if err != nil {
			log.Printf("Failed to create ticket: %v", err)
			b.sendMessage(message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç. –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç.")
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		_, err = b.ticketService.AddMessage(ticket.ID, user.ID, message.Text, true)
		if err != nil {
			log.Printf("Failed to add message: %v", err)
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
		if err := b.handleMessageFiles(message, ticket.ID, user.ID); err != nil {
			log.Printf("Failed to handle files: %v", err)
		}

		b.sendMessage(message.Chat.ID, "‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")
	} else {
		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–∏–∫–µ—Ç—É
		_, err = b.ticketService.AddMessage(activeTicket.ID, user.ID, message.Text, true)
		if err != nil {
			log.Printf("Failed to add message: %v", err)
			b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
			return
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
		if err := b.handleMessageFiles(message, activeTicket.ID, user.ID); err != nil {
			log.Printf("Failed to handle files: %v", err)
		}

		b.sendMessage(message.Chat.ID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–∏–∫–µ—Ç—É #"+strconv.Itoa(int(activeTicket.ID)))
	}
}

func (b *Bot) handleMessageFiles(message *tgbotapi.Message, ticketID uint, userID uint) error {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
	messages, err := b.ticketService.GetTicketByID(ticketID)
	if err != nil {
		return err
	}

	if len(messages.Messages) == 0 {
		return fmt.Errorf("no messages found for ticket")
	}

	lastMessage := messages.Messages[len(messages.Messages)-1]

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
	if message.Photo != nil && len(message.Photo) > 0 {
		photo := message.Photo[len(message.Photo)-1] // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
		_, err = b.fileService.CreateFile(
			lastMessage.ID,
			photo.FileID,
			"photo.jpg",
			"photo",
			int64(photo.FileSize),
		)
		return err
	}

	if message.Video != nil {
		_, err = b.fileService.CreateFile(
			lastMessage.ID,
			message.Video.FileID,
			message.Video.FileName,
			"video",
			int64(message.Video.FileSize),
		)
		return err
	}

	if message.Document != nil {
		_, err = b.fileService.CreateFile(
			lastMessage.ID,
			message.Document.FileID,
			message.Document.FileName,
			"document",
			int64(message.Document.FileSize),
		)
		return err
	}

	if message.Voice != nil {
		_, err = b.fileService.CreateFile(
			lastMessage.ID,
			message.Voice.FileID,
			"voice.ogg",
			"voice",
			int64(message.Voice.FileSize),
		)
		return err
	}

	if message.VideoNote != nil {
		_, err = b.fileService.CreateFile(
			lastMessage.ID,
			message.VideoNote.FileID,
			"video_note.mp4",
			"video_note",
			int64(message.VideoNote.FileSize),
		)
		return err
	}

	return nil
}

func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
	switch query.Data {
	case "create_ticket":
		b.handleCreateTicketCallback(query)
	case "my_tickets":
		b.handleMyTicketsCallback(query)
	case "admin_open_tickets":
		b.handleAdminOpenTicketsCallback(query)
	case "admin_answered_tickets":
		b.handleAdminAnsweredTicketsCallback(query)
	case "admin_closed_tickets":
		b.handleAdminClosedTicketsCallback(query)
	case "admin_stats":
		b.handleAdminStatsCallback(query)
	default:
		if strings.HasPrefix(query.Data, "reply_") {
			b.handleReplyCallback(query)
		} else if strings.HasPrefix(query.Data, "close_") {
			b.handleCloseTicketCallback(query)
		} else if strings.HasPrefix(query.Data, "view_ticket_") {
			b.handleViewTicketCallback(query)
		} else if strings.HasPrefix(query.Data, "admin_reply_") {
			b.handleAdminReplyCallback(query)
		}
	}
}

func (b *Bot) handleCreateTicketCallback(query *tgbotapi.CallbackQuery) {
	user, err := b.userService.GetUserByTelegramID(int64(query.From.ID))
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	activeTicket, err := b.ticketService.GetActiveTicketByUserID(user.ID)
	if err != nil {
		b.answerCallbackQuery(query.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
		return
	}

	if activeTicket != nil {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #"+strconv.Itoa(int(activeTicket.ID)))
		return
	}

	b.answerCallbackQuery(query.ID, "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É!")
}

func (b *Bot) handleMyTicketsCallback(query *tgbotapi.CallbackQuery) {
	user, err := b.userService.GetUserByTelegramID(int64(query.From.ID))
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	tickets, err := b.ticketService.GetUserTickets(user.ID)
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	if len(tickets) == 0 {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	text := "üìã –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:\n\n"
	for _, ticket := range tickets {
		status := "üü¢ –û—Ç–∫—Ä—ã—Ç"
		if ticket.Status == models.TicketStatusAnswered {
			status = "üü° –û—Ç–≤–µ—á–µ–Ω"
		} else if ticket.Status == models.TicketStatusClosed {
			status = "üî¥ –ó–∞–∫—Ä—ã—Ç"
		}

		text += fmt.Sprintf("üî∏ –¢–∏–∫–µ—Ç #%d - %s\n", ticket.ID, status)
		text += fmt.Sprintf("üìù %s\n", ticket.Subject)
		text += fmt.Sprintf("üìÖ %s\n\n", ticket.CreatedAt.Format("02.01.2006 15:04"))
	}

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleReplyCallback(query *tgbotapi.CallbackQuery) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
	parts := strings.Split(query.Data, "_")
	if len(parts) != 2 {
		return
	}

	_, err := strconv.ParseUint(parts[1], 10, 32)
	if err != nil {
		return
	}

	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	b.answerCallbackQuery(query.ID, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
}

func (b *Bot) handleCloseTicketCallback(query *tgbotapi.CallbackQuery) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
	parts := strings.Split(query.Data, "_")
	if len(parts) != 2 {
		return
	}

	ticketID, err := strconv.ParseUint(parts[1], 10, 32)
	if err != nil {
		return
	}

	user, err := b.userService.GetUserByTelegramID(int64(query.From.ID))
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	ticket, err := b.ticketService.GetTicketByID(uint(ticketID))
	if err != nil {
		b.answerCallbackQuery(query.ID, "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	if ticket.UserID != user.ID {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.")
		return
	}

	if err := b.ticketService.CloseTicket(uint(ticketID)); err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.")
		return
	}

	b.answerCallbackQuery(query.ID, "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
}

func (b *Bot) handleAdminOpenTicketsCallback(query *tgbotapi.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
	if !b.isUserAdmin(int64(query.From.ID)) {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	tickets, err := b.ticketService.GetOpenTickets()
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	if len(tickets) == 0 {
		msg := tgbotapi.NewMessage(query.Message.Chat.ID, "üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.")
		b.api.Send(msg)
		b.answerCallbackQuery(query.ID, "")
		return
	}

	text := "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
	for _, ticket := range tickets {
		text += fmt.Sprintf("üî∏ –¢–∏–∫–µ—Ç #%d\n", ticket.ID)
		text += fmt.Sprintf("üë§ %s %s\n", ticket.User.FirstName, ticket.User.LastName)
		text += fmt.Sprintf("üìù %s\n", ticket.Subject)
		text += fmt.Sprintf("üìÖ %s\n\n", ticket.CreatedAt.Format("02.01.2006 15:04"))
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, ticket := range tickets {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üî∏ #%d - %s", ticket.ID, ticket.Subject[:min(30, len(ticket.Subject))]),
			fmt.Sprintf("view_ticket_%d", ticket.ID),
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleAdminAnsweredTicketsCallback(query *tgbotapi.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
	if !b.isUserAdmin(int64(query.From.ID)) {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	tickets, err := b.ticketService.GetAnsweredTickets()
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	if len(tickets) == 0 {
		msg := tgbotapi.NewMessage(query.Message.Chat.ID, "üí¨ –û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.")
		b.api.Send(msg)
		b.answerCallbackQuery(query.ID, "")
		return
	}

	text := "üí¨ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
	for _, ticket := range tickets {
		text += fmt.Sprintf("üî∏ –¢–∏–∫–µ—Ç #%d\n", ticket.ID)
		text += fmt.Sprintf("üë§ %s %s\n", ticket.User.FirstName, ticket.User.LastName)
		text += fmt.Sprintf("üìù %s\n", ticket.Subject)
		text += fmt.Sprintf("üìÖ %s\n\n", ticket.UpdatedAt.Format("02.01.2006 15:04"))
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, ticket := range tickets {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üî∏ #%d - %s", ticket.ID, ticket.Subject[:min(30, len(ticket.Subject))]),
			fmt.Sprintf("view_ticket_%d", ticket.ID),
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleAdminClosedTicketsCallback(query *tgbotapi.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
	if !b.isUserAdmin(int64(query.From.ID)) {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	tickets, err := b.ticketService.GetClosedTickets()
	if err != nil {
		b.answerCallbackQuery(query.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤.")
		return
	}

	if len(tickets) == 0 {
		msg := tgbotapi.NewMessage(query.Message.Chat.ID, "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.")
		b.api.Send(msg)
		b.answerCallbackQuery(query.ID, "")
		return
	}

	text := "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
	for _, ticket := range tickets {
		text += fmt.Sprintf("üî∏ –¢–∏–∫–µ—Ç #%d\n", ticket.ID)
		text += fmt.Sprintf("üë§ %s %s\n", ticket.User.FirstName, ticket.User.LastName)
		text += fmt.Sprintf("üìù %s\n", ticket.Subject)
		if ticket.ClosedAt != nil {
			text += fmt.Sprintf("üìÖ –ó–∞–∫—Ä—ã—Ç: %s\n\n", ticket.ClosedAt.Format("02.01.2006 15:04"))
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, ticket := range tickets {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üî∏ #%d - %s", ticket.ID, ticket.Subject[:min(30, len(ticket.Subject))]),
			fmt.Sprintf("view_ticket_%d", ticket.ID),
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleAdminStatsCallback(query *tgbotapi.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
	if !b.isUserAdmin(int64(query.From.ID)) {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	openTickets, _ := b.ticketService.GetOpenTickets()
	answeredTickets, _ := b.ticketService.GetAnsweredTickets()
	closedTickets, _ := b.ticketService.GetClosedTickets()

	text := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
	text += fmt.Sprintf("üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ: %d\n", len(openTickets))
	text += fmt.Sprintf("üü° –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ: %d\n", len(answeredTickets))
	text += fmt.Sprintf("üî¥ –ó–∞–∫—Ä—ã—Ç—ã–µ: %d\n", len(closedTickets))
	text += fmt.Sprintf("üìà –í—Å–µ–≥–æ: %d\n", len(openTickets)+len(answeredTickets)+len(closedTickets))

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleViewTicketCallback(query *tgbotapi.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
	if !b.isUserAdmin(int64(query.From.ID)) {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞
	parts := strings.Split(query.Data, "_")
	if len(parts) != 3 {
		return
	}

	ticketID, err := strconv.ParseUint(parts[2], 10, 32)
	if err != nil {
		return
	}

	ticket, err := b.ticketService.GetTicketByID(uint(ticketID))
	if err != nil {
		b.answerCallbackQuery(query.ID, "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
	text := fmt.Sprintf("üî∏ –¢–∏–∫–µ—Ç #%d\n", ticket.ID)
	text += fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s\n", ticket.User.FirstName, ticket.User.LastName)
	text += fmt.Sprintf("üìù –¢–µ–º–∞: %s\n", ticket.Subject)
	text += fmt.Sprintf("üìÖ –°–æ–∑–¥–∞–Ω: %s\n", ticket.CreatedAt.Format("02.01.2006 15:04"))

	status := "üü¢ –û—Ç–∫—Ä—ã—Ç"
	if ticket.Status == models.TicketStatusAnswered {
		status = "üü° –û—Ç–≤–µ—á–µ–Ω"
	} else if ticket.Status == models.TicketStatusClosed {
		status = "üî¥ –ó–∞–∫—Ä—ã—Ç"
	}
	text += fmt.Sprintf("üìä –°—Ç–∞—Ç—É—Å: %s\n\n", status)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	text += "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è:\n"
	for _, message := range ticket.Messages {
		sender := "üë§ –ö–ª–∏–µ–Ω—Ç"
		if !message.IsFromUser {
			sender = "üë®‚Äçüíº –ê–¥–º–∏–Ω"
		}
		text += fmt.Sprintf("%s: %s\n", sender, message.Content)
		text += fmt.Sprintf("üìÖ %s\n\n", message.CreatedAt.Format("02.01.2006 15:04"))
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
	var buttons [][]tgbotapi.InlineKeyboardButton

	if ticket.Status != models.TicketStatusClosed {
		replyButton := tgbotapi.NewInlineKeyboardButtonData(
			"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
			fmt.Sprintf("admin_reply_%d", ticket.ID),
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(replyButton))
	}

	closeButton := tgbotapi.NewInlineKeyboardButtonData(
		"‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
		fmt.Sprintf("close_%d", ticket.ID),
	)
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(closeButton))

	backButton := tgbotapi.NewInlineKeyboardButtonData(
		"üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ",
		"admin_open_tickets",
	)
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(backButton))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleAdminReplyCallback(query *tgbotapi.CallbackQuery) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
	if !b.isUserAdmin(int64(query.From.ID)) {
		b.answerCallbackQuery(query.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∏–∫–µ—Ç–∞
	parts := strings.Split(query.Data, "_")
	if len(parts) != 3 {
		return
	}

	ticketID, err := strconv.ParseUint(parts[2], 10, 32)
	if err != nil {
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
	b.stateManager.SetReplyingState(int64(query.From.ID), uint(ticketID))

	text := fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #%d\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:", ticketID)

	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	b.api.Send(msg)
	b.answerCallbackQuery(query.ID, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç.")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è min
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	b.api.Send(msg)
}

func (b *Bot) answerCallbackQuery(queryID, text string) {
	callback := tgbotapi.NewCallback(queryID, text)
	b.api.Request(callback)
}

func (b *Bot) GetBotUsername() string {
	return b.api.Self.UserName
}

func (b *Bot) isUserAdmin(telegramID int64) bool {
	for _, adminID := range b.config.AdminIDs {
		if adminID == telegramID {
			return true
		}
	}
	return false
}
